-------- sozd_krup_proekta_na_JAVA ------------ Русаков Михаил http://myrusakov.ru
---- Part 1. Введение
1-1. О курсе
1-2. ТЗ
1-3. Действия при созданиие крупной программы
1-4. Иконки - не прогр-ние, а работа с редакторами изо,форматы,размеры
---- Part 2. Модель
2-1. Создание проекта и стр-ры папок
2-2. ..классов с текстовыми константами
2-3. ..базовых классов
2-4. ..класса для основных объектов
2-5. ..фильтра
2-6. ..класса для работы со статистикой
2-7. ..класса основных настроек
2-8. ..класса настроек стиля
2-9. ..класса для форматирования данных
2-10...класса  с кодами для обработки событий
---- Part 3. Сохранение и загрузка данных
3-1. Создание класса Wrapper
3-2. Механизм сохранения и загрузки данных
3-3. Создание класса SaveData
3-4. Добавление текстовых данных
5. Динамическое Обновлtние курсов валют
---- Part 4. Создание базового интерфейса пользователя - кирпичики UI
4-1. Вывод основного окна
4-2. Создание основных интерфйейсов
4-3. ..меню
4-4. ..класса кнопки
4-5. ..основного тулбара
4-6. ..тулбара с ф-циями - добав/редакт/удал
4-8. ..компонента "выбор даты" - DatacPicker
4-9. ..компонента "выбор файла" - FileChooser
---- Part 5. Диалоговые окна - максимально абстрактно и независимо
5-1. Создание окна с информацией об ошибке
5-2. ..с подтверждением операций
5-3. .."о программе"
5-4. ..абстрактного для редактирования данных
5-5. ..счета  ----- окна редактирования отд.типов
5-6. ..статьи
5-7. ..транзакции
5-8. ..перевода
5-9. ..вылюты
---- Part 6. Вывод данных - из уже созданных UI кирпичиков(part 4)
6-1. Вывод левой панели с балансом
6-2. Создание класса правой панели
6-3. ..модели для таблицы
6-4. ..класса таблицы
6-5. Вывод таблицы с последними транзакциями
6-6. ..счетами
6-7. ..статьями
6-8. ..транзакциями
6-9. ..переводами
6-10. ..вылютами
6-11. Создание всплывающего меню дял таблицы
6-12. .. и вывод панели фильтра
---- Part 7.Вывод статистики - графиков и гистаграмм
7-1. Создание класса для вывода гистаграмм
7-2. Вывод панели с гистаграммой
7-1. Создание панели дял переключения типа статистики
---- Part 8. Обработка событий
8-1. Обработка меню "Файл"
8-2. ..событий тулбара с ф-циями
8-3. .."Правка"
8-4. .."Вид"
8-5. .."Помощь"
8-6. ..основного тульара
8-7. ..событий фильтра
8-8. ..панели выбора типа статистики
8-9. ..главного окна
8-10. ..всплываюещго меню
8-11. ..диалоговых окон
---- Part 9. Заключени
9-1. Сборка проекта
9-2. Заключение
---- Бонус. Добавление мультиязычности в прог на Java
1. Работа с языковыми константами
2. Создание дополнительных пунктов меню
3. Обработка пунктов меню
-------------------------------------------------------------------
---- Part 1. Введение
---- 1-1. О курсе
0-09
---- 1-2. ТЗ - ДОмашная бухгастерия (Personal Finance)
0-13 word file - с окнами программы
меню -----------------------------------
тулбар-панель инструментов --------------------
левая панель-|-правая панель------------
Баланс       |   Кнопки добав/редакт/удал
БалансВвалюте| -доходы/расходы последние
             | -счета - кошелек/валюты,карточки,вклады
             | -статьи - доходов/расходов: з/п,книги..
             | -транзакции - сами оп-ции:приход(з\п)/расход
             | -переводы - мех-зм переводов между счетами, за период
             | -валюты - 3-знач.коды,5 штук,авто-конвертация
             | -статистика: гистаграмма (стороняя библ.) дох/расх
0-10 Доп.ф-ции
0-13
---- 1-3. Действия при созданиие крупной программы
0-0 Програму разбивали на неск-ко блоков и 1-я это -
Модель: (из MVC) - кот отвечает за вс. вн.стр-ру (ч.2)
    1.Классы осн.объектов (валют,счета,..) + исключения (некорректная сумма,дата)
    2.Фильтр по дате,
    3.Статистика - класс возвращающий сводную инфу, баланс по валютам,дял гистограмм
    4.формирования данных - дат..,сумм,
    5.классы настроек(базовых, стили,текстовые/языковые константы, коды обраьротчиков событий)
0-04  Сохранение и загрузка данных(ч.3) все в XML
    1. Создание класса Wrapper
    2. Механизм сохранения в и загрузки данных из файла
    3. Хранилище данных
    4. Загрузка курсов валют из Интернета, парсинг XML
0-06 Создание базового (т.е.не воодим конкретных данных) интерфейса пользователя (ч.4)
0-07 Диалоговые окна (ч.5)
0-09 Вывод данных (ч-6)
0-14 Вывод статистики (ч.7)
0-15 Обработка событий (ч.8)
0-16 Закл. (ч.9)
0-17
---- 1-4. Иконки - не прогр-ние, а работа с редакторами изо,форматы,размеры
0-00  побольше, создают красоту интерфейса,
    будут для каждого пункта меню, тулбара, для всех столбцов,
iconfinder.com : search : pig bank
все в PNG, т.к прозрачные
0-02 переводить в 1 размер,квадрат - paint.net
0-07 выделяем волш.палочкой и подчищаем
0-08
---- Part 2. Модель
---- 2-1. Создание проекта и стр-ры папок
0-00
fonts - fonts-online.ru - обязательно ttf-фонт, с русским языком,
images - иконки
saves - настройки,..
0-06
---- 2-2. ..классов с текстовыми константами
0-0 нужны тексты ошибок => текстовые константы  => отдельный пакет
0-01 в нем класс final .. Text, т.к. не нужны наследники,
константы храним в виде хеш-мэпа - ассоциативный массив - ключ-значение
private static HashMap<String, String> data = new HashMap();
сразу же Alt-Enter - импортируем import java.util.HashMap;
0-02 инициализируем в зависимости от языка IF константами, но пока обойдеся без IF 1м языком
0-03 тк data не меняется можем сделать final
[ ---https://pingvinus.ru/git/1592
1)локально
 cd work\PersonalFinance
 git init Создайте local репозиторий:
 git add -A  Теперь можно добавить все файлы в индекс и сделать первый коммит:
 git commit -m "First commit."
2)на github [alami@km.ru / a3] создания репо PersonalFinance
3)локально добавит удаленный репозиторий с именем origin, который указывает на ваш Github-репозиторий
  git remote add origin https://github.com/alami/PersonalFinance
  git push -u origin master
]
0-08 инициализацию вызываем из главного файла программы
0-09 подключим шрифт
0-13
---- 2-3. ..базовых классов
0-0 абстрактный базовый класс
0-01 после транзакций - добав/редакт/удал => пересчитать баланс и т.п => 
    public void postAdd () {}
    public void postEdit () {}
    public void postRemove () {}
не делаем абстрактными, т.к. необязательно реализовывать, если не нужны
0-03 надо вернуть строку для выпадающего списк.т.е. какие поля выводить
0-06 займемся исключениями - коды ощибок
0-12 возврат сообщения в хзависимости от кода
0-14 добавляем языковые костанты
0-17
---- 2-4. ..класса для основных объектов
0-00 непосредственно объекты в пакете Модель: Article extends Common, ...
0-02 обязателен костнруктор без пареметров для каждого объекта:
т.к. сохрание и загрузки объектов в файл требует дефолтный конструктор  !!
хотя мы его сами не используем


0-32
---- 2-5. ..фильтра
---- 2-6. ..класса для работы со статистикой
---- 2-7. ..класса основных настроек
---- 2-8. ..класса настроек стиля
---- 2-9. ..класса для форматирования данных
---- 2-10...класса  с кодами для обработки событий
---- Part 3. Сохранение и загрузка данных
3-1. Создание класса Wrapper
3-2. Механизм сохранения и загрузки данных
3-3. Создание класса SaveData
3-4. Добавление текстовых данных
5. Динамическое Обновление курсов валют
---- Part 4. Создание базового интерфейса пользователя - кирпичики UI
4-1. Вывод основного окна
4-2. Создание основных интерфйейсов
4-3. ..меню
4-4. ..класса кнопки
4-5. ..основного тулбара
4-6. ..тулбара с ф-циями - добав/редакт/удал
4-8. ..компонента "выбор даты" - DatacPicker
4-9. ..компонента "выбор файла" - FileChooser
---- Part 5. Диалоговые окна - максимально абстрактно и независимо
5-1. Создание окна с информацией об ошибке
5-2. ..с подтверждением операций - хочет  закр.прог.
5-3. .."о программе"
5-4. ..абстрактного для редактирования данных(т.к. отличаются списком полей и метками)
5-5. ..счета ---- окна редактирования конкретных типов на основе  абстрактного
5-6. ..статьи
5-7. ..транзакции
5-8. ..перевода
5-9. ..вылюты
---- Part 6. Вывод данных - из уже созданных UI кирпичиков(part 4)
6-1. Вывод левой панели с балансом
6-2. Создание класса правой панели
6-3. ..модели для собственной абстрактной таблицы
    с цветами (зел-доход.красный-расход, серый-неактивный) и выделениями, т.е. своим рендерингом
6-4. ..класса таблицы
6-5. Вывод таблицы с последними транзакциями
6-6. ..счетами
6-7. ..статьями
6-8. ..транзакциями
6-9. ..переводами
6-10. ..вылютами
6-11. Создание всплывающего меню для таблицы (по правой мыши и горячих клавиш)
6-12. .. и вывод панели фильтра
---- Part 7.Вывод статистики - графиков и гистаграмм
7-1. Создание класса для вывода гистаграмм
7-2. Вывод панели с гистаграммой
7-1. Создание панели дял переключения типа статистики
---- Part 8. Обработка событий
8-1. Обработка меню "Файл"
8-2. ..событий тулбара с ф-циями
8-3. .."Правка"
8-4. .."Вид"
8-5. .."Помощь"
8-6. ..основного тульара
8-7. ..событий фильтра
8-8. ..панели выбора типа статистики
8-9. ..главного окна
8-10. ..всплываюещго меню
8-11. ..диалоговых окон
---- Part 9. Заключени
9-1. Сборка проекта - фалик, кшрифты,картинки
9-2. Заключение
---- Бонус. Добавление мультиязычности в прог на Java
1. Работа с языковыми константами
2. Создание дополнительных пунктов меню
3. Обработка пунктов меню
======================================================================
https://elisdn.ru/blog/134/four-pillars-of-psrs
------4 столпа PSR : ------------------
    PSR (PHP Standard Recommendations) – стандартные рекомендации PHP.
    FIG (Framework Interoperability Group) – группа взаимодействия framework'ов.
------ Coding Styles
PSR-1: Basic Coding Standard = PhpStorm/ReformatCode
PSR-12: Extended Coding Style Guide
------ Autoloading
PSR-4: Improved Autoloading = путь в namespace и имя класса совпадают с именами папок и файла => подключать Composer
------ Обобщённые интерфейсы  = Почему тысячи программистов для своих тысяч библиотек тысячи раз пишут логеры и кэшеры?
       Надо бы чтобы все программисты договорились и сделали один общий LoggerInterface и CacheInterface.
PSR-3: Logger Interface
PSR-6: Caching Interface
PSR-11: Container Interface - 2 метода: has и get.
  при замене контейнера все-равно придется переписывать все те места, в которых происходит заполнение контейнера
  В том-же symfony – это внутри бандлов, в laravel - в провайдерах.


PSR-13: Hypermedia Links
PSR-14: Event Dispatcher
PSR-16: Simple Cache
----- HTTP:
PSR-7: HTTP Message Interfaces
  --Облегчении функционального тестирования без поднятия полного окружения
    и возможности запуска под нетрадиционными окружениями типа Swoole или RoadRunner (это как раз замена реализации).
PSR-15: HTTP Server Request Handlers
  RequestHandlerInterface -  по одному методу: зачем?
    handle(ServerRequestInterface $request): ResponseInterface;
  MiddlewareInterface: - зачем?
    process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface;
PSR-17: HTTP Factories - зачем менять request|response?
PSR-18: HTTP Client

--участники FIG  заботятся о себе и своих продуктах, чем об общих интересах сообщества
   —> недавний уход Фабьена/Symfony. Но PSR-14, на который ругался Fabien, Symfony запилили некоторое время спустя.
-- PSR-3, PSR-6 и т.д.: Я не очень понимаю, зачем может потребоваться прокидывать свой код внутрь чужой библиотеки.
    В Java есть исторически сложившаяся экосистема Apache Commons.
